# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build and publish NuGet-Package

on:
  workflow_call:
    inputs:
      CSPROJ_PATH:
        description: 'Path to the .csproj that should be published'
        required: true
        type: string
      TAG_PREFIX:
        description: 'Prefix for the Tag: {Prefix}{Version} (v1.2.3)'
        default: 'v'
        required: false
        type: string
    secrets:
      NUGET_API_KEY:
        required: true

jobs:  
  publish_nuget:
  
    name: Publish NuGet-Package
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Pack
      run: dotnet pack ${{ inputs.CSPROJ_PATH }} --no-restore --configuration Release -o ${{ github.workspace }}/.nupkg
    - name: Extract package-id and version
      id: extract_nuget_info
      run: |
        FILE=$(ls ${{ github.workspace }}/.nupkg/*.nupkg)
        FILENAME=$(basename "$FILE")
        PACKAGE_ID=$(echo "$FILENAME" | sed -nE 's/(.+).([0-9]+.[0-9]+.[0-9]+(-[^.]+)?).nupkg/\1/p')
        VERSION=$(echo "$FILENAME" | sed -nE 's/(.+).([0-9]+.[0-9]+.[0-9]+(-[^.]+)?).nupkg/\2/p')
        echo "package_id=$PACKAGE_ID" >> "$GITHUB_OUTPUT"
        echo "version=$VERSION" >> "$GITHUB_OUTPUT"
    - name: Check if package exits on NuGet
      id: nuget_check
      run: |
        PACKAGE_ID="${{steps.extract_nuget_info.outputs.package_id}}"
        VERSION=$"${{steps.extract_nuget_info.outputs.version}}"
        PACKAGE_ID_LOWER=$(echo "$PACKAGE_ID" | tr '[:upper:]' '[:lower:]')
        VERSION_LOWER=$(echo "$VERSION" | tr '[:upper:]' '[:lower:]')
        URL="https://api.nuget.org/v3-flatcontainer/$PACKAGE_ID_LOWER/$VERSION_LOWER/$PACKAGE_ID_LOWER.$VERSION_LOWER.nupkg"
        if curl --head --silent --fail "$URL" > /dev/null; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
        else
            echo "exists=false" >> "$GITHUB_OUTPUT"
        fi
    - name: Stop if package already exits
      if: steps.nuget_check.outputs.exists == 'true'
      run: echo "Version already exiting on NuGet. Stopping..." && exit 1
    - name: Push to NuGet
      if: steps.nuget_check.outputs.exists == 'false'
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        PACKAGE_ID="${{steps.extract_nuget_info.outputs.package_id}}"
        VERSION=$"${{steps.extract_nuget_info.outputs.version}}"
        dotnet nuget push ${{ github.workspace }}/.nupkg/$PACKAGE_ID.$VERSION.nupkg --source https://api.nuget.org/v3/index.json --api-key $NUGET_API_KEY --skip-duplicate
    - name: Create version tag
      if: steps.nuget_check.outputs.exists == 'false'
      run: |
         VERSION=$"${{steps.extract_nuget_info.outputs.version}}"
         TAG="${{ inputs.TAG_PREFIX }}$VERSION"
         git fetch --tags
         if git tag --list | grep "$TAG"; then
            echo "Tag $TAG already exits. Skipping..."
         else
            git config --local user.email "${{ github.actor }}"
            git config --local user.name "${{ github.actor }}@users.noreply.github.com"
            git tag "$TAG"
            git push origin "$TAG"
         fi
